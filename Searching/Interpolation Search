Interpolation search is an improved variant of binary search that works on 
uniformly distributed sorted arrays. Instead of always dividing the array in half,
it estimates the position of the target value using interpolation formula.

Time Complexity
Best case: O(1) - when the element is found in the first probe
Average case: O(log log n) - for uniformly distributed data
Worst case: O(n) - when elements are exponentially distributed

Space Complexity: O(1)


def interpolation_search(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high and target >= arr[low] and target <= arr[high]:
      
        if low == high:
            if arr[low] == target:
                return low
            return -1        
        
        pos = low + ((target - arr[low]) * (high - low)) // (arr[high] - arr[low])
         
        if pos < low or pos > high:
            return -1
        
        if arr[pos] == target:
            return pos

        elif arr[pos] < target:
            low = pos + 1
        
        else:
            high = pos - 1
    
    return -1
