#include <stdio.h>
#include <stdlib.h>
#include <math.h>
void print(int n, int *board, int *count) {
    int i, j;
    printf("\n\nPossibility %d:\n", ++(*count));
    for (i = 1; i <= n; ++i) {
        printf("\n\n");
        for (j = 1; j <= n; ++j) {
            if (board[i] == j)
                printf("  Q"); 
            else
                printf("  *"); 
        }
    }
}

int place(int row, int column, int *board) {
    int i;
    for (i = 1; i <= row - 1; ++i) {
        if (board[i] == column)
            return 0;
        else if (abs(board[i] - column) == abs(i - row))
            return 0;
    }
    return 1; 
}

void queen(int row, int n, int *board, int *count) {
    int column;
    for (column = 1; column <= n; ++column) {
        if (place(row, column, board)) {
            board[row] = column; 
            if (row == n)
                print(n, board, count); 
            else 
                queen(row + 1, n, board, count);
        }
    }
}
int main() {
    int n, i, j;
    int *board;
    int count = 0;
    scanf("%d", &n);
    board = (int *)malloc((n + 1) * sizeof(int));
    if (board == NULL) {
        return 1;
    }
    queen(1, n, board, &count);
    return 0;
}


==========
public class NQueens {
    private static int count = 0;

    public static void main(String[] args) {
        int n = 4;
        int[] board = new int[n + 1];
        solveQueens(1, n, board);
    }

    private static void printBoard(int n, int[] board) {
        System.out.println("\n\nPossibility " + (++count) + ":");
        for (int i = 1; i <= n; i++) {
            System.out.println();
            for (int j = 1; j <= n; j++) {
                if (board[i] == j) {
                    System.out.print("  Q");
                } else {
                    System.out.print("  *");
                }
            }
        }
    }

    private static boolean isValidPlace(int row, int column, int[] board) {
        for (int i = 1; i < row; i++) {
            if (board[i] == column || Math.abs(board[i] - column) == Math.abs(i - row)) {
                return false;
            }
        }
        return true;
    }

    private static void solveQueens(int row, int n, int[] board) {
        for (int column = 1; column <= n; column++) {
            if (isValidPlace(row, column, board)) {
                board[row] = column;
                if (row == n) {
                    printBoard(n, board);
                } else {
                    solveQueens(row + 1, n, board);
                }
            }
        }
    }
}
=========================

def print_board(n, board, count):
    count[0] += 1
    print(f"\n\nPossibility {count[0]}:")
    for i in range(1, n + 1):
        print("\n")
        for j in range(1, n + 1):
            if board[i] == j:
                print("  Q", end="")
            else:
                print("  *", end="")

def is_valid_place(row, column, board):
    for i in range(1, row):
        if board[i] == column or abs(board[i] - column) == abs(i - row):
            return False
    return True

def solve_queens(row, n, board, count):
    for column in range(1, n + 1):
        if is_valid_place(row, column, board):
            board[row] = column
            if row == n:
                print_board(n, board, count)
            else:
                solve_queens(row + 1, n, board, count)

def main():
    n = int(input())
    board = [0] * (n + 1)
    count = [0]
    solve_queens(1, n, board, count)

if __name__ == "__main__":
    main()
