// This question is easy once you understand how chars are stored in a computers memory.
// http://www.asciitable.com/ -> every char is actually mapped to a decimal (integer) value, this
// means that the integer value of 65 represents 'A', 97 represents 'a', etc. 
// C++ is great because it will implicity convert char <-> integer

// Note: There is one tricky part however, which is that a char can not an integer value greater than 
// 127. This is because a standard char is only 1 byte/8 bits (with one sign bit), so the largest value 
// it can hold is 2^7 - 1 = 127. Thus when we perform our rotations, we should temporarily store
// the char in a larger data type such as an integer so that we can go higher than 127, then convert
// it back to an integer after doing the arithmetic.


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine(); // Consume newline
        String s = sc.nextLine();
        int k = sc.nextInt();
        k %= 26; // Since 26 rotations = same letter
        
        StringBuilder result = new StringBuilder();
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= 'A' && c <= 'Z') {
                // Uppercase
                int letter = c;
                letter += k;
                if (letter > 'Z') {
                    letter = ((letter - 'A') % 26) + 'A';
                }
                result.append((char)letter);
            } else if (c >= 'a' && c <= 'z') {
                // Lowercase
                int letter = c;
                letter += k;
                if (letter > 'z') {
                    letter = ((letter - 'a') % 26) + 'a';
                }
                result.append((char)letter);
            } else {
                // Not a letter - append as-is
                result.append(c);
            }
        }
        
        System.out.println(result.toString());
    }
}
